package com.agoda.rolladillo

import java.sql.*
import java.util.*
import java.util.concurrent.Executor

public class ProxyConnection(val connection: Connection): Connection {

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        return connection.unwrap(iface);
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        return connection.isWrapperFor(iface);
    }

    override fun close() {
        return connection.close()
    }

    override fun createStatement(): Statement {
        return ProxyStatement(connection.createStatement())
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        return ProxyStatement(connection.createStatement(resultSetType,resultSetConcurrency))
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        return ProxyStatement(connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability))
    }

    override fun prepareStatement(sql: String?): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql))
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql,resultSetType,resultSetConcurrency))
    }

    override fun prepareStatement(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability))
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql,autoGeneratedKeys))
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql,columnIndexes))
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        return ProxyPreparedStatement(connection.prepareStatement(sql,columnNames))
    }

    override fun prepareCall(sql: String?): CallableStatement {
        return ProxyCallableStatement(connection.prepareCall(sql))
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        return ProxyCallableStatement(connection.prepareCall(sql,resultSetType,resultSetConcurrency))
    }

    override fun prepareCall(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): CallableStatement {
        return ProxyCallableStatement(connection.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability))
    }

    override fun nativeSQL(sql: String?): String {
        return connection.nativeSQL(sql)
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        return connection.setAutoCommit(autoCommit)
    }

    override fun getAutoCommit(): Boolean {
        return connection.autoCommit
    }

    override fun commit() {
        return connection.commit()
    }

    override fun rollback() {
        return connection.rollback()
    }

    override fun rollback(savepoint: Savepoint?) {
        return connection.rollback(savepoint)
    }

    override fun isClosed(): Boolean {
        return connection.isClosed
    }

    override fun getMetaData(): DatabaseMetaData = connection.metaData

    override fun setReadOnly(readOnly: Boolean) {
        return connection.setReadOnly(readOnly)
    }

    override fun isReadOnly(): Boolean = connection.isReadOnly

    override fun setCatalog(catalog: String?) {
        connection.catalog = catalog
    }

    override fun getCatalog(): String  = connection.catalog

    override fun setTransactionIsolation(level: Int) {
        connection.transactionIsolation = level
    }

    override fun getTransactionIsolation(): Int = connection.transactionIsolation

    override fun getWarnings(): SQLWarning  = connection.warnings

    override fun clearWarnings() {
        connection.clearWarnings()
    }

    override fun getTypeMap(): MutableMap<String, Class<*>> {
        return connection.typeMap
    }

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) {
        connection.typeMap = map
    }

    override fun setHoldability(holdability: Int) {
        connection.holdability = holdability
    }

    override fun getHoldability(): Int {
        return connection.holdability
    }

    override fun setSavepoint(): Savepoint {
        return connection.setSavepoint()
    }

    override fun setSavepoint(name: String?): Savepoint {
        return connection.setSavepoint(name)
    }

    override fun releaseSavepoint(savepoint: Savepoint?) {
        return connection.releaseSavepoint(savepoint)
    }

    override fun createClob(): Clob {
        return connection.createClob()
    }

    override fun createBlob(): Blob {
        return connection.createBlob()
    }

    override fun createNClob(): NClob {
        return connection.createNClob()
    }

    override fun createSQLXML(): SQLXML {
        return connection.createSQLXML()
    }

    override fun isValid(timeout: Int): Boolean {
        return connection.isValid(timeout)
    }

    override fun setClientInfo(name: String?, value: String?) {
        connection.setClientInfo(name,value)
    }

    override fun setClientInfo(properties: Properties?) {
        connection.clientInfo = properties
    }

    override fun getClientInfo(name: String?): String {
        return connection.getClientInfo(name) ?: ""
    }

    override fun getClientInfo(): Properties {
        return connection.clientInfo ?: Properties()
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        return connection.createArrayOf(typeName,elements)
    }

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct {
        return connection.createStruct(typeName,attributes)
    }

    override fun setSchema(schema: String?) {
        connection.schema = schema
    }

    override fun getSchema(): String {
        return connection.schema ?: ""
    }

    override fun abort(executor: Executor?) {
        return connection.abort(executor)
    }

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) {
        return connection.setNetworkTimeout(executor,milliseconds)
    }

    override fun getNetworkTimeout(): Int {
        return connection.networkTimeout
    }
}